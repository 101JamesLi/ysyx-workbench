$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  3 . addrin [2:0] $end
  $var wire  3 / addrout [2:0] $end
  $var wire  1 + clk $end
  $var wire  8 - din [7:0] $end
  $var wire  8 0 dout [7:0] $end
  $var wire  1 , wen $end
  $scope module ram $end
   $var wire 32 2 RAM_ADDR_WIDTH [31:0] $end
   $var wire 32 1 RAM_WIDTH [31:0] $end
   $var wire  3 . addrin [2:0] $end
   $var wire  3 / addrout [2:0] $end
   $var wire  1 + clk $end
   $var wire  8 - din [7:0] $end
   $var wire  8 0 dout [7:0] $end
   $var wire  8 # ram[0] [7:0] $end
   $var wire  8 $ ram[1] [7:0] $end
   $var wire  8 % ram[2] [7:0] $end
   $var wire  8 & ram[3] [7:0] $end
   $var wire  8 ' ram[4] [7:0] $end
   $var wire  8 ( ram[5] [7:0] $end
   $var wire  8 ) ram[6] [7:0] $end
   $var wire  8 * ram[7] [7:0] $end
   $var wire  1 , wen $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000000 #
b00000000 $
b00000000 %
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000000 *
0+
1,
b00000001 -
b001 .
b001 /
b00000000 0
b00000000000000000000000000001000 1
b00000000000000000000000000000011 2
#2
b00000001 $
1+
b00000001 0
#3
0+
b00000010 -
b010 .
b010 /
b00000000 0
#4
b00000010 %
1+
b00000010 0
#5
0+
b00000111 -
b101 .
b101 /
b00000000 0
#6
b00000111 (
1+
b00000111 0
#7
0+
b00000011 -
b010 .
b010 /
b00000010 0
#8
b00000011 %
1+
b00000011 0
#9
0+
b00000000 -
b101 .
b101 /
b00000111 0
#10
b00000000 (
1+
b00000000 0
#11
0+
b001 /
b00000001 0
#12
1+
#13
