$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 ( a $end
  $var wire  1 ) b $end
  $var wire  1 * c $end
  $var wire  1 + clk $end
  $var wire  1 , clka $end
  $var wire  1 - qb $end
  $var wire  1 . qc $end
  $var wire  1 / qd $end
  $scope module addingfd $end
   $var wire  1 + clk $end
   $var wire  1 , clka $end
   $var wire  1 2 e $end
   $var wire  1 0 q $end
   $var wire  1 - qb $end
   $var wire  1 . qc $end
   $var wire  1 / qd $end
   $var wire  1 @ r $end
   $var wire  1 1 w $end
   $scope module i1 $end
    $var wire  1 + a $end
    $var wire  1 , c $end
   $upscope $end
   $scope module i2 $end
    $var wire  1 0 a $end
    $var wire  1 - c $end
    $var wire  1 + clk $end
    $var wire  1 0 d $end
    $var wire  1 6 e $end
    $var wire  1 , h $end
    $var wire  1 3 p $end
    $var wire  1 4 q $end
    $var wire  1 7 r $end
    $var wire  1 3 s $end
    $var wire  1 5 w $end
    $var wire  1 8 x $end
    $scope module i1 $end
     $var wire  1 + a $end
     $var wire  1 , c $end
    $upscope $end
    $scope module i2 $end
     $var wire  1 0 a $end
     $var wire  1 3 c $end
    $upscope $end
    $scope module i3 $end
     $var wire  1 0 a $end
     $var wire  1 , b $end
     $var wire  1 4 c $end
    $upscope $end
    $scope module i4 $end
     $var wire  1 , a $end
     $var wire  1 3 b $end
     $var wire  1 5 c $end
    $upscope $end
    $scope module i5 $end
     $var wire  1 4 a $end
     $var wire  1 5 b $end
     $var wire  1 6 c $end
     $var wire  1 7 d $end
    $upscope $end
    $scope module i6 $end
     $var wire  1 6 a $end
     $var wire  1 + b $end
     $var wire  1 3 c $end
    $upscope $end
    $scope module i7 $end
     $var wire  1 + a $end
     $var wire  1 7 b $end
     $var wire  1 8 c $end
    $upscope $end
    $scope module i8 $end
     $var wire  1 3 a $end
     $var wire  1 8 b $end
     $var wire  1 - c $end
     $var wire  1 0 d $end
    $upscope $end
   $upscope $end
   $scope module i3 $end
    $var wire  1 1 a $end
    $var wire  1 . c $end
    $var wire  1 0 clk $end
    $var wire  1 1 d $end
    $var wire  1 < e $end
    $var wire  1 3 h $end
    $var wire  1 9 p $end
    $var wire  1 : q $end
    $var wire  1 = r $end
    $var wire  1 9 s $end
    $var wire  1 ; w $end
    $var wire  1 > x $end
    $scope module i1 $end
     $var wire  1 0 a $end
     $var wire  1 3 c $end
    $upscope $end
    $scope module i2 $end
     $var wire  1 1 a $end
     $var wire  1 9 c $end
    $upscope $end
    $scope module i3 $end
     $var wire  1 1 a $end
     $var wire  1 3 b $end
     $var wire  1 : c $end
    $upscope $end
    $scope module i4 $end
     $var wire  1 3 a $end
     $var wire  1 9 b $end
     $var wire  1 ; c $end
    $upscope $end
    $scope module i5 $end
     $var wire  1 : a $end
     $var wire  1 ; b $end
     $var wire  1 < c $end
     $var wire  1 = d $end
    $upscope $end
    $scope module i6 $end
     $var wire  1 < a $end
     $var wire  1 0 b $end
     $var wire  1 9 c $end
    $upscope $end
    $scope module i7 $end
     $var wire  1 0 a $end
     $var wire  1 = b $end
     $var wire  1 > c $end
    $upscope $end
    $scope module i8 $end
     $var wire  1 9 a $end
     $var wire  1 > b $end
     $var wire  1 . c $end
     $var wire  1 1 d $end
    $upscope $end
   $upscope $end
   $scope module i4 $end
    $var wire  1 2 a $end
    $var wire  1 / c $end
    $var wire  1 1 clk $end
    $var wire  1 2 d $end
    $var wire  1 % e $end
    $var wire  1 9 h $end
    $var wire  1 ? p $end
    $var wire  1 # q $end
    $var wire  1 & r $end
    $var wire  1 ? s $end
    $var wire  1 $ w $end
    $var wire  1 ' x $end
    $scope module i1 $end
     $var wire  1 1 a $end
     $var wire  1 9 c $end
    $upscope $end
    $scope module i2 $end
     $var wire  1 2 a $end
     $var wire  1 ? c $end
    $upscope $end
    $scope module i3 $end
     $var wire  1 2 a $end
     $var wire  1 9 b $end
     $var wire  1 # c $end
    $upscope $end
    $scope module i4 $end
     $var wire  1 9 a $end
     $var wire  1 ? b $end
     $var wire  1 $ c $end
    $upscope $end
    $scope module i5 $end
     $var wire  1 # a $end
     $var wire  1 $ b $end
     $var wire  1 % c $end
     $var wire  1 & d $end
    $upscope $end
    $scope module i6 $end
     $var wire  1 % a $end
     $var wire  1 1 b $end
     $var wire  1 ? c $end
    $upscope $end
    $scope module i7 $end
     $var wire  1 1 a $end
     $var wire  1 & b $end
     $var wire  1 ' c $end
    $upscope $end
    $scope module i8 $end
     $var wire  1 ? a $end
     $var wire  1 ' b $end
     $var wire  1 / c $end
     $var wire  1 2 d $end
    $upscope $end
   $upscope $end
  $upscope $end
  $scope module xordoor $end
   $var wire  1 ( a $end
   $var wire  1 ) b $end
   $var wire  1 * c $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
1#
0$
1%
0&
0'
0(
0)
0*
0+
1,
1-
0.
1/
10
01
12
03
14
05
16
07
08
19
0:
0;
1<
1=
1>
0?
0@
#2
1+
0,
0-
1.
00
13
04
17
18
1;
0<
0>
#3
0+
1,
1-
0.
10
03
14
07
08
0;
1<
1>
#4
1+
0,
0-
1.
00
13
04
17
18
1;
0<
0>
#5
